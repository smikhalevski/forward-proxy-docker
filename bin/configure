#!/bin/sh

set -e

clear

# PROXY_HTTP_PORT and PROXY_HTTPS_PORT are defined externally

LETSENCRYPT_DIR=/etc/letsencrypt
LIVE_CERTS_DIR="$LETSENCRYPT_DIR/live"
FOXHOLE_CERT_DIR="$LIVE_CERTS_DIR/foxhole"

FOXHOLE_DIR=/foxhole
FOXHOLE_CONF="$FOXHOLE_DIR/foxhole.conf"
FOXHOLE_BASIC_AUTH_CONF="$FOXHOLE_DIR/foxhole_basic_auth.conf"
FOXHOLE_ALLOW_CONF="$FOXHOLE_DIR/foxhole_allow.conf"
FOXHOLE_PROXY_CONF="$FOXHOLE_DIR/foxhole_proxy.conf"

HTPASSWD="$FOXHOLE_DIR/.htpasswd"
SSL_CONF="$FOXHOLE_DIR/ssl.conf"

FOXHOLE_PUBLIC_DIR="$FOXHOLE_DIR/public"
HTTP_PAC="http.pac"
HTTPS_PAC="https.pac"

PROXY_DNS_RESOLVER=8.8.8.8

SERVER_IP=$(wget -qO- http://myip.enix.org/REMOTE_ADDR)

mkdir -p "$FOXHOLE_DIR" "$FOXHOLE_PUBLIC_DIR"

function confirm {
    while true; do
        read -p "$1 [y/n]: " CONFIRM
        case "$CONFIRM" in
            y) return 0;;
            n) return 1;;
        esac
    done
}

COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_OFF='\033[0m'

echo
echo -e "$COLOR_YELLOW"
echo ' ▄████  ████▄     ▄   ▄  █ ████▄ █     ▄███▄  '
echo ' █▀   ▀ █   █ ▀▄   █ █   █ █   █ █     █▀   ▀ '
echo ' █▀▀    █   █   █ ▀  ██▀▀█ █   █ █     ██▄▄   '
echo ' █      ▀████  ▄ █   █   █ ▀████ ███▄  █▄   ▄▀'
echo '  █           █   ▀▄    █            ▀ ▀███▀  '
echo '   ▀           ▀       ▀                      '
echo -e "$COLOR_OFF"


# HTTPS certificates
# ==================

echo
if confirm 'Configure HTTPS?'; then
    echo
    echo -e "${COLOR_YELLOW}A registered domain name that has an 'A = $SERVER_IP' record in DNS is required.$COLOR_OFF"
    echo
    read -p "Enter a domain name: " DOMAIN_NAME

    if [ "$DOMAIN_NAME" ]; then

        DOMAIN_CERT_DIR="$LIVE_CERTS_DIR/$DOMAIN_NAME"

        [ -d "$DOMAIN_CERT_DIR" ] && confirm "Delete existing certificates for ${DOMAIN_NAME}?" && rm -rf "$DOMAIN_CERT_DIR"

        rm -f "$SSL_CONF" "$FOXHOLE_CERT_DIR"

        ! [ -d "$DOMAIN_CERT_DIR" ] && \
        echo && \
        echo -n 'Issuing a certificate... ' && \
        echo '' >"$FOXHOLE_CONF" && \
        nginx -s reload && \
        certbot certonly \
            --nginx \
            --nginx-server-root /usr/local/openresty/nginx/conf \
            --non-interactive \
            --agree-tos \
            --no-eff-email \
            --no-redirect \
            --email "admin@$DOMAIN_NAME" \
            --cert-name "$DOMAIN_NAME" \
            --domain "$DOMAIN_NAME" \
            --quiet && \
        echo -e "${COLOR_GREEN}OK$COLOR_OFF"

        [ -d "$DOMAIN_CERT_DIR" ] && \
        ln -snf "$DOMAIN_CERT_DIR" "$FOXHOLE_CERT_DIR" && \
        cat >"$SSL_CONF" <<EOF
ssl_certificate ${FOXHOLE_CERT_DIR}/fullchain.pem;
ssl_certificate_key ${FOXHOLE_CERT_DIR}/privkey.pem;
ssl_session_timeout 5m;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_dhparam ${LETSENCRYPT_DIR}/ssl-dhparams.pem;
ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
EOF

    else
        DOMAIN_NAME="$(basename "$(readlink -f "$FOXHOLE_CERT_DIR")")"

        [ "$DOMAIN_NAME" ] && \
        confirm "Discard existing $DOMAIN_NAME HTTPS configuration (SSL certificates are preserved)?" && \
        rm -f "$SSL_CONF" "$FOXHOLE_CERT_DIR"
    fi
fi


# Authentication
# ==============

echo
if confirm 'Configure authentication?'; then
    [ -s "$HTPASSWD" ] && confirm 'Delete existing user list?' && rm "$HTPASSWD"

    touch "$HTPASSWD"

    while true; do
        echo
        read -p 'Enter username: ' USERNAME
        [ "$USERNAME" ] && read -p 'Enter password: ' PASSWORD && htpasswd -b "$HTPASSWD" "$USERNAME" "$PASSWORD" || break
    done

    cat >"$FOXHOLE_BASIC_AUTH_CONF" <<EOF
auth_basic "Authentication required";
auth_basic_user_file "${HTPASSWD}";

rewrite_by_lua_file /usr/local/openresty/nginx/conf/proxy_auth.lua;
EOF
fi

# Discard basic auth if there are no users
! [ -s "$HTPASSWD" ] && rm -f "$HTPASSWD" "$FOXHOLE_BASIC_AUTH_CONF"


# IP whitelist
# ============

echo
if confirm 'Configure IP whitelist?'; then
    [ -s "$FOXHOLE_ALLOW_CONF" ] && confirm 'Delete existing whitelist?' && rm "$FOXHOLE_ALLOW_CONF"

    while true; do
        echo
        read -p 'Enter IP address: ' IP
        ! [ "$IP" ] && break
        ! [[ $IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo -e "${COLOR_RED}Invalid IP address$COLOR_OFF" && continue

        echo -e "allow $IP;\ndeny all;" >>"$FOXHOLE_ALLOW_CONF"

        # Sort and discard duplicates
        cat "$FOXHOLE_ALLOW_CONF" | sort | uniq >"$FOXHOLE_ALLOW_CONF.tmp"
        mv -f "$FOXHOLE_ALLOW_CONF.tmp" "$FOXHOLE_ALLOW_CONF"
    done
fi


# Composing configs
# =================

cat >"$FOXHOLE_PROXY_CONF" <<EOF
resolver ${PROXY_DNS_RESOLVER} ipv6=off;

proxy_connect;
proxy_connect_allow 443 563;
proxy_connect_connect_timeout 10s;
proxy_connect_data_timeout 10s;

location / {
  proxy_pass \$scheme://\$host;
}
EOF

if [ -f "$SSL_CONF" ]; then
    SERVER_HOST="$(basename "$(readlink -f "$FOXHOLE_CERT_DIR")")"
else
    SERVER_HOST="$SERVER_IP"
fi

echo "function FindProxyForURL(){return 'HTTP $SERVER_HOST:$PROXY_HTTP_PORT';}" >"$FOXHOLE_PUBLIC_DIR/$HTTP_PAC"

if [ -f "$SSL_CONF" ]; then
    echo "function FindProxyForURL(){return 'HTTPS $SERVER_HOST:$PROXY_HTTPS_PORT';}" >"$FOXHOLE_PUBLIC_DIR/$HTTPS_PAC"

    # HTTP + HTTPS
    cat >"$FOXHOLE_CONF" <<EOF
server {
    listen 80 default_server;
    server_name _;

    location / {
      return 400 'Bad Request';
    }

    location = /foxhole.pac {
        root ${FOXHOLE_PUBLIC_DIR};
        try_files "/$HTTP_PAC" =404;
    }
}

server {
    listen 443 ssl;
    server_name _;
    include ${SSL_CONF};

    location / {
      return 400 'Bad Request';
    }

    location = /foxhole.pac {
        root ${FOXHOLE_PUBLIC_DIR};
        try_files "/$HTTPS_PAC" =404;
    }
}

server {
    listen ${PROXY_HTTP_PORT};
    server_name _;
    include ${FOXHOLE_DIR}/foxhole_*.conf;
}

server {
    listen ${PROXY_HTTPS_PORT} ssl;
    server_name _;
    include ${SSL_CONF};
    include ${FOXHOLE_DIR}/foxhole_*.conf;
}
EOF

else
    rm -f "$FOXHOLE_PUBLIC_DIR/$HTTPS_PAC"

    # HTTP only
    cat >"$FOXHOLE_CONF" <<EOF
server {
    listen 80 default_server;
    server_name _;

    location / {
      return 400 'Bad Request';
    }

    location = /foxhole.pac {
        root ${FOXHOLE_PUBLIC_DIR};
        try_files "/$HTTP_PAC" =404;
    }
}

server {
    listen 443;
    server_name _;
    return 400 'Bad Request';
}

server {
    listen ${PROXY_HTTP_PORT};
    server_name _;
    include ${FOXHOLE_DIR}/foxhole_*.conf;
}

server {
    listen ${PROXY_HTTPS_PORT};
    server_name _;
    return 400 'Bad Request';
}
EOF

fi


# Apply nginx config
# ==================

echo
echo 'Applying configuration...'

echo
nginx -s reload

echo -e "${COLOR_GREEN}Proxy successfully started$COLOR_OFF"

echo
echo "HTTP proxy:"
echo "  $SERVER_HOST:$PROXY_HTTP_PORT"
echo "  Configuration URL: http://$SERVER_HOST/foxhole.pac"

if [ -f "$SSL_CONF" ]; then
    echo
    echo "HTTPS proxy:"
    echo "  $SERVER_HOST:$PROXY_HTTPS_PORT"
    echo "  Configuration URL: https://$SERVER_HOST/foxhole.pac"
fi
