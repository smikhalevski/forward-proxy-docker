#!/bin/sh

set -e

clear

LETSENCRYPT_DIR=/etc/letsencrypt
LIVE_CERTS_DIR="$LETSENCRYPT_DIR/live"

FOXHOLE_CONF_DIR=/foxhole
FOXHOLE_CERT_DIR="$LIVE_CERTS_DIR/foxhole"
FOXHOLE_HTPASSWD="$FOXHOLE_CONF_DIR/foxhole_htpasswd"
FOXHOLE_SSL_CONF="$FOXHOLE_CONF_DIR/foxhole_ssl.conf"
FOXHOLE_BASIC_AUTH_CONF="$FOXHOLE_CONF_DIR/foxhole_basic_auth.conf"
FOXHOLE_ALLOW_CONF="$FOXHOLE_CONF_DIR/foxhole_allow.conf"
FOXHOLE_CONF="$FOXHOLE_CONF_DIR/foxhole.conf"

SERVER_DNS_RESOLVER=8.8.8.8
SERVER_IP=$(wget -qO- http://myip.enix.org/REMOTE_ADDR)

mkdir -p "$FOXHOLE_CONF_DIR"

function confirm {
    while true; do
        read -p "$1 [y/n]: " CONFIRM
        case "$CONFIRM" in
            y) return 0;;
            n) return 1;;
        esac
    done
}

COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_OFF='\033[0m'

echo
echo -e "$COLOR_YELLOW"
echo ' ▄████  ████▄     ▄   ▄  █ ████▄ █     ▄███▄  '
echo ' █▀   ▀ █   █ ▀▄   █ █   █ █   █ █     █▀   ▀ '
echo ' █▀▀    █   █   █ ▀  ██▀▀█ █   █ █     ██▄▄   '
echo ' █      ▀████  ▄ █   █   █ ▀████ ███▄  █▄   ▄▀'
echo '  █           █   ▀▄    █            ▀ ▀███▀  '
echo '   ▀           ▀       ▀                      '
echo -e "$COLOR_OFF"


# HTTPS certificates
# ==================

echo
if confirm 'Configure HTTPS?'; then
    echo
    echo -e "${COLOR_YELLOW}A registered domain name that has an 'A = $SERVER_IP' record in DNS is required.$COLOR_OFF"
    echo
    read -p "Enter a domain name: " DOMAIN_NAME

    if [ "$DOMAIN_NAME" ]; then

        CERT_DIR="$LIVE_CERTS_DIR/$DOMAIN_NAME"

        [ -d "$CERT_DIR" ] && confirm "Delete existing certificates for ${DOMAIN_NAME}?" && rm -rf "$CERT_DIR"

        rm -f "$FOXHOLE_SSL_CONF" "$FOXHOLE_CERT_DIR"

        ! [ -d "$CERT_DIR" ] && \
        echo && \
        echo -n 'Issuing a certificate... ' && \
        echo '' >"$FOXHOLE_CONF" && \
        nginx -s reload && \
        certbot certonly \
            --nginx \
            --nginx-server-root /usr/local/openresty/nginx/conf \
            --non-interactive \
            --agree-tos \
            --no-eff-email \
            --no-redirect \
            --email "admin@$DOMAIN_NAME" \
            --cert-name "$DOMAIN_NAME" \
            --domain "$DOMAIN_NAME" \
            --quiet && \
        echo -e "${COLOR_GREEN}OK$COLOR_OFF"

        [ -d "$CERT_DIR" ] && \
        ln -snf "$CERT_DIR" "$FOXHOLE_CERT_DIR" && \
        cat >"$FOXHOLE_SSL_CONF" <<EOF
ssl_certificate ${FOXHOLE_CERT_DIR}/fullchain.pem;
ssl_certificate_key ${FOXHOLE_CERT_DIR}/privkey.pem;
ssl_session_timeout 5m;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_dhparam ${LETSENCRYPT_DIR}/ssl-dhparams.pem;
ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
EOF

    else
        DOMAIN_NAME="$(basename "$(readlink -f "$FOXHOLE_CERT_DIR")")"

        [ "$DOMAIN_NAME" ] && \
        confirm "Discard existing $DOMAIN_NAME HTTPS configuration (SSL certificates are preserved)?" && \
        rm "$FOXHOLE_CERT_DIR" && \
        DOMAIN_NAME=''
    fi
fi


# Authentication
# ==============

echo
if confirm 'Configure authentication?'; then
    [ -s "$FOXHOLE_HTPASSWD" ] && confirm 'Delete existing user list?' && rm "$FOXHOLE_HTPASSWD"

    touch "$FOXHOLE_HTPASSWD"

    while true; do
        echo
        read -p 'Enter username: ' USERNAME
        [ "$USERNAME" ] && read -p 'Enter password: ' PASSWORD && htpasswd -b "$FOXHOLE_HTPASSWD" "$USERNAME" "$PASSWORD" || break
    done

    cat >"$FOXHOLE_BASIC_AUTH_CONF" <<EOF
auth_basic "Authentication required";
auth_basic_user_file "${FOXHOLE_HTPASSWD}";

rewrite_by_lua_file "${FOXHOLE_CONF_DIR}/proxy_auth.lua";
EOF
fi

# Discard basic auth if there are no users
! [ -s "$FOXHOLE_HTPASSWD" ] && rm -f "$FOXHOLE_HTPASSWD" "$FOXHOLE_BASIC_AUTH_CONF"


# IP whitelist
# ============

echo
if confirm 'Configure IP whitelist?'; then
    [ -s "$FOXHOLE_ALLOW_CONF" ] && confirm 'Delete existing whitelist?' && rm "$FOXHOLE_ALLOW_CONF"

    while true; do
        echo
        read -p 'Enter IP address: ' IP
        ! [ "$IP" ] && break
        ! [[ $IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo -e "${COLOR_RED}Invalid IP address$COLOR_OFF" && continue

        echo "allow $IP;" >>"$FOXHOLE_ALLOW_CONF"

        # Deny all other IPs
        grep -vF "deny all;" "$FOXHOLE_ALLOW_CONF" >"$FOXHOLE_ALLOW_CONF.tmp" && mv -f "$FOXHOLE_ALLOW_CONF.tmp" "$FOXHOLE_ALLOW_CONF"
        echo 'deny all;' >>"$FOXHOLE_ALLOW_CONF"
    done
fi


# Apply nginx config
# ==================

echo
echo 'Applying configuration...'

echo '
server {
    listen 80 default_server;
    server_name _;
' >"$FOXHOLE_CONF"

# HTTP to HTTPS redirect
[ -f "$FOXHOLE_SSL_CONF" ] && echo '
    return 301 https://$host$request_uri;
}
server {
    listen 443 ssl;
    server_name _;
' >>"$FOXHOLE_CONF"

cat >>"$FOXHOLE_CONF" <<EOF
    include ${FOXHOLE_CONF_DIR}/foxhole_*.conf;

    resolver ${SERVER_DNS_RESOLVER} ipv6=off;

    proxy_connect;
    proxy_connect_allow 443 563;
    proxy_connect_connect_timeout 10s;
    proxy_connect_data_timeout 10s;

    location / {
      proxy_pass \$scheme://\$host;
    }
}
EOF

nginx -s reload

if [ "$DOMAIN_NAME" ]; then
    SERVER_PUBLIC_ADDRESS=$DOMAIN_NAME
else
    SERVER_PUBLIC_ADDRESS=$SERVER_IP
fi

SERVER_PORT=80
[ -f "$FOXHOLE_SSL_CONF" ] && SERVER_PORT=443

echo
echo -e "${COLOR_GREEN}Server started at ${SERVER_PUBLIC_ADDRESS}:${SERVER_PORT}$COLOR_OFF"
